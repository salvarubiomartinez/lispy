(SETQ DEFUN (MACRO ($NAME $PARAMS $BODY) (EVAL (LIST (QUOTE SETQ) $NAME (LIST (QUOTE LAMBDA) $PARAMS $BODY)))))
(SETQ LET (MACRO ($NAME $EXPR) (EVAL (CONS (LIST (QUOTE LAMBDA) (MAPCAR CAR $NAME) $EXPR) (MAPCAR (LAMBDA (E) (CAR (CDR E))) $NAME)))))
(DEFUN LENGTH-RECUR (L) (COND ((EQ NIL L) 0) (T (PLUS 1 (LENGTH-RECUR (CDR L))))))
(DEFUN NULL (X) (EQ X NIL))
(DEFUN MAPCAR (P L) (COND ((NULL L) (LIST)) (T (CONS (P (CAR L)) (MAPCAR P (CDR L))))))
(DEFUN FACTORIAL (N) (COND ((EQ N 0) 1) ((EQ N 1) 1) (T (PROD N (FACTORIAL (DIFF N 1))))))
(DEFUN REVERSE-RECUR (X) (COND ((ATOM X) X) (T (APPEND (REVERSE-RECUR (CDR X)) (CONS (CAR X) NIL )))))
(DEFUN REVERSE (REVERSE-LS) (REDUCEL (LAMBDA (REVERSE-X REVERSE-Y) (CONS REVERSE-Y REVERSE-X)) NIL REVERSE-LS))
(DEFUN APPEND-RECUR (X Y) (COND ((EQ X NIL) Y) (T (CONS (CAR X) (APPEND-RECUR (CDR X) Y)))))
(DEFUN APPEND (APPEND-X APPEND-Y) (REDUCER CONS APPEND-Y APPEND-X))
(DEFUN REDUCER-RECUR (F LS INIT) (COND ((NULL LS) INIT) (T (F (CAR LS) (REDUCER-RECUR F (CDR LS) INIT)))))
(DEFUN REDUCER (REDUCE-F REDUCE-INIT REDUCE-LS) ((LOOP (F INIT LS) ((NULL LS) INIT) (F (F (CAR LS) INIT) (CDR LS))) REDUCE-F REDUCE-INIT (REVERSE REDUCE-LS)))
(DEFUN REDUCEL (REDUCE-F REDUCE-INIT REDUCE-LS) ((LOOP (F INIT LS) ((NULL LS) INIT) (F (F INIT (CAR LS)) (CDR LS))) REDUCE-F REDUCE-INIT REDUCE-LS))
(DEFUN + () (REDUCEL PLUS 0 &ARGS))
(DEFUN * () (REDUCEL PROD 1 &ARGS))
(DEFUN - () (REDUCEL (LAMBDA (X Y) (DIFF X Y)) (CAR &ARGS) (CDR &ARGS)))
(DEFUN / () (REDUCEL (LAMBDA (X Y) (QUOT X Y)) (CAR &ARGS) (CDR &ARGS)))
(DEFUN RANGE-RECUR (INIT FINAL) (COND ((EQ INIT FINAL) (LIST FINAL)) (T (CONS INIT (RANGE-RECUR (PLUS 1 INIT) FINAL)))))
(DEFUN MAP (MAP-FUN MAP-LIS) (REDUCER (LAMBDA (MAP-X MAP-ACC) (CONS (MAP-FUN MAP-X) MAP-ACC)) NIL MAP-LIS))
(DEFUN LENGTH (LENGTH-LIST) (REDUCEL (LAMBDA (X Y) (PLUS 1 X)) 0 LENGTH-LIST))
(DEFUN RANGE (RANGE-INIT RANGE-FINAL) ((LOOP (FINAL INIT ACC) ((EQ INIT (PLUS FINAL 1)) ACC) ((DIFF FINAL 1) INIT (CONS FINAL ACC))) RANGE-FINAL RANGE-INIT NIL))
(DEFUN FLATTEN (LS-FLATTEN) (REDUCER APPEND NIL LS-FLATTEN))
