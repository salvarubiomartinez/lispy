(SETQ DEFUN (MACRO ($NAME $PARAMS $BODY) (EVAL (LIST (QUOTE SETQ) $NAME (LIST (QUOTE LAMBDA) $PARAMS $BODY)))))
(SETQ LET (MACRO ($NAME $EXPR) (EVAL (CONS (LIST (QUOTE LAMBDA) (MAPCAR CAR $NAME) $EXPR) (MAPCAR (LAMBDA (E) (CAR (CDR E))) $NAME)))))
(DEFUN LENGTH-RECUR (L) (COND ((EQ NIL L) 0) (T (PLUS 1 (LENGTH-RECUR (CDR L))))))
(DEFUN NULL (X) (EQ X NIL))
(DEFUN MAPCAR (P L) (COND ((NULL L) (LIST)) (T (CONS (P (CAR L)) (MAPCAR P (CDR L))))))
(DEFUN FACTORIAL (N) (COND ((EQ N 0) 1) ((EQ N 1) 1) (T (PROD N (FACTORIAL (DIFF N 1))))))
(DEFUN REVERSE (X) (COND ((ATOM X) X) (T (APPEND (REVERSE (CDR X)) (CONS (CAR X) NIL )))))
(DEFUN APPEND-RECUR (X Y) (COND ((EQ X NIL) Y) (T (CONS (CAR X) (APPEND-RECUR (CDR X) Y)))))
(DEFUN REDUCE-RECUR (F LS INIT) (COND ((NULL LS) INIT) (T (F (CAR LS) (REDUCE-RECUR F (CDR LS) INIT)))))
(DEFUN REDUCEL (F LS INIT) (COND ((NULL LS) INIT) (T (REDUCE F (CDR LS) (F INIT (CAR LS))))))
(DEFUN + () (REDUCE PLUS &ARGS 0))
(DEFUN * () (REDUCE PROD &ARGS 1))
(DEFUN - () (REDUCE (LAMBDA (X Y) (DIFF Y X)) (CDR &ARGS) (CAR &ARGS)))
(DEFUN / () (REDUCE (LAMBDA (X Y) (QUOT Y X)) (CDR &ARGS) (CAR &ARGS)))
(DEFUN RANGE-RECUR (INIT FINAL) (COND ((EQ INIT FINAL) (LIST FINAL)) (T (CONS INIT (RANGE-RECUR (PLUS 1 INIT) FINAL)))))
(DEFUN MAP (MAP-FUN MAP-LIS) (REDUCE (MACRO (MAP-X MAP-Y) (APPEND MAP-Y (LIST (MAP-FUN MAP-X) ))) MAP-LIS NIL))
(DEFUN LENGTH (LENGTH-LIST) (REDUCE (MACRO (X Y) (PLUS 1 Y)) LENGTH-LIST 0))
(DEFUN RANGE (RANGE-INIT RANGE-FINAL) ((LOOP (INIT FINAL ACC) ((EQ INIT (PLUS FINAL 1)) ACC) ((PLUS 1 INIT) FINAL (APPEND ACC (LIST INIT)))) RANGE-INIT RANGE-FINAL NIL))
