(SETQ LENGTH (LAMBDA (L) (COND ((EQ NIL L) 0) (T (PLUS 1 (LENGTH (CDR L)))))))
(SETQ NULL (LAMBDA (X) (EQ X NIL)))
(SETQ MAPCAR (LAMBDA (P L) (COND ((NULL L) (LIST)) (T (CONS (P (CAR L)) (MAPCAR P (CDR L)))))))
(SETQ LET (MACRO ($NAME $EXPR) (EVAL (CONS (LIST (QUOTE LAMBDA) (MAPCAR CAR $NAME) $EXPR) (MAPCAR (LAMBDA (E) (CAR (CDR E))) $NAME)))))
(SETQ DEFUN (MACRO ($NAME $PARAMS $BODY) (EVAL (LIST (QUOTE SETQ) $NAME (LIST (QUOTE LAMBDA) $PARAMS $BODY)))))
(DEFUN FACTORIAL (N) (COND ((EQ N 0) 1) ((EQ N 1) 1) (T (PROD N (FACTORIAL (DIFF N 1))))))
(DEFUN APPEND (X Y) (COND ((EQ X NIL) Y) ((ATOM X) (CONS X Y)) (T (CONS (CAR X) (APPEND (CDR X) Y)))))
(DEFUN REVERSE (X) (COND ((ATOM X) X) (T (APPEND (REVERSE (CDR X)) (CONS (CAR X) NIL )))))
(DEFUN REDUCE (F LS INIT) (COND ((NULL LS) INIT) (T (F (CAR LS) (REDUCE F (CDR LS) INIT)))))
(DEFUN REDUCEL (F LS INIT) (COND ((NULL LS) INIT) (T (REDUCE F (CDR LS) (F INIT (CAR LS))))))
(DEFUN + () (REDUCE PLUS &ARGS 0))
(DEFUN * () (REDUCE PROD &ARGS 1))
(DEFUN - () (REDUCE (LAMBDA (X Y) (DIFF Y X)) (CDR &ARGS) (CAR &ARGS)))
(DEFUN / () (REDUCE (LAMBDA (X Y) (QUOT Y X)) (CDR &ARGS) (CAR &ARGS)))
